A Short Tutorial
----------------

How to design application level protocols ? 
-------------------------------------------

It goes in three steps:
-- Recognize the services that this protocol must ensure
-- Reorganize protocol data unit(pdu) structre and its encoding scheme. 
-- Client-Server interaction, environment consideration

We will consider, a design structure of a typical file transfer protocol(TFTP), from this you can take cues, on how to design your application level protocol

We want to have this in our TFTP protocol:
--tcp transport 
--files are binary,or of netascii format
--no access control, or dir manipulation

Sevices
-- Read/Write a file

--list of pdu's
	---RRQ, read request tcp
	---WRQ, write request tcp
	---DATA, tcp 
	---Ack, tcp
	---Error, tcp

pdu structure encoding 

	RRQ
	opcode | Filename EOS | Mode EOS

	WRQ
	opcode | Filename EOS | Mode EOS

	DATA
	opcode | Block# | Data

	Ack
	opcode | Block#

	RRQ
	opcode | Errcode | Errstring EOS

Basic interactions in our TFTP protocol

	Client		Server
	-----------------------
	RRQ			// To read a file from TFTP server
			DATA
	Ack
			DATA
	Ack
	------------------------
	WRQ			// To write a file to TFTP server
			Ack
	DATA
			Ack
	-----------------------

Application Level checksum: 
----------------------------
Though, both tcp and udp supports checksum, however you have to apply md5 hash to bigger chunks of file, and re-compute the same on the peer. 
if both matches, then your file is quite correct, and if not, you need to re-request that particular chunk of file. 

Tips:
------
-- Do app-level checksum in the end.
-- Good way to think in this project is bottom-up way. That is, first start with basic client-server interactions in your protocol. And after 
you are satisfied with that, you need to restructure your pdus and services. 
-- Do comment your codes!

=====================================
Deadline extension can very well be a reality, however, if it turns out to be a myth, then.... [Complete your story :)]
